debug = true
--Variables globales

initial_status = true
drawable = true
canshoot = true
line = 0
canshootimermax = 0.3
canshootimer = canshootimermax
initial_enemy_position = {x=0, y=0}
initial_enemy_position.x = (love.graphics.getWidth() / 8)
initial_enemy_position.y = (love.graphics.getHeight() / 8)
positionador_matrix = {x=initial_enemy_position.x, y=love.graphics.getHeight(), initial_enemy_position.y}
enemies = {} -- X , Y , IMG
messages = {'puntaje', 'Enemigos restantes', 'vidas', 'Bien hecho' , 'Perdiste piojo'}
player = {x=200, y= 400, speed=200, img=nil}
bullets = {}
-- Funciones propias
function CheckCollision(x1,y1,w1,h1, x2,y2,w2,h2)
  return x1 < x2+w2 and
         x2 < x1+w1 and
         y1 < y2+h2 and
         y2 < y1+h1
end


draw_initial_state = function (drawable, line) -- verifica si es el estado inicial del juego

	while drawable  and  line < 4 do
		newEnemy = { x = positionador_matrix.x, y = positionador_matrix.y, img = alienimg }
		table.insert(enemies, newEnemy)
		if ((positionador_matrix.x)+(alienimg:getWidth()*3) > love.graphics.getWidth()) then 
			positionador_matrix.y = (positionador_matrix.y) + (alienimg:getHeight()*2)
			line = line + 1
			positionador_matrix.x = initial_enemy_position.x - (alienimg:getWidth()*2)
		end
		positionador_matrix.x = positionador_matrix.x + alienimg:getWidth()*2
	end
end

status_compare = function (status)
	if initial_status then 
		draw_initial_state (dt)
	end
end

function love.load(arg)
	alienimg = love.graphics.newImage('aliensprite.jpg')
	player.img = love.graphics.newImage("shuttle2_0.png")
	--casitasimg = love.graphics.newImage(nil)
	bulletimg = love.graphics.newImage('bullet.png')
end

function love.update(dt)
	--escape the game
	if love.keyboard.isDown('escape') then
		love.event.push('quit')
	end
	--keyboard events related to player
	if love.keyboard.isDown('left','a') then
		if player.x > 0 then -- binds us to the map
			player.x = player.x - (player.speed*dt)
		end
	elseif love.keyboard.isDown('right','d') then
		if player.x < (love.graphics.getWidth() - player.img:getWidth()) then
			player.x = player.x + (player.speed*dt)
		end
	end
	if love.keyboard.isDown('lshift') then
		player.speed = 500
	end
	if not love.keyboard.isDown ('lshift') then 
		player.speed = 200
	end
	if love.keyboard.isDown(' ') and canshoot then 
		newBullet = { x = player.x + (player.img:getWidth()/2), y = player.y, img = bulletimg }
		table.insert(bullets, newBullet)
		canshoot = false
		canshootimer = canshootimermax
	end
	if love.keyboard.isDown('r') then
		drawable = true
		line = 0
	end
	--update events
	for i, bullets in ipairs(bullets) do
		bullets.y = bullets.y - (200 * dt)

		if bullets.y < 0 then -- remove bullets when they pass off the screen
			table.remove(bullets, i)
		end
	end
	canshootimer = canshootimer - (1 * dt)
	if canshootimer < 0 then
		canshoot = true
	end
	-- check initial state
	if drawable then
		line = 0
		draw_initial_state (drawable, line)
		drawable = false
	end		
	-- Ultima funcion
	for i, enemy in ipairs(enemies) do
			for j, bullet in ipairs(bullets) do
				if CheckCollision(enemy.x, enemy.y, enemy.img:getWidth(), enemy.img:getHeight(), bullet.x, bullet.y, bullet.img:getWidth(), bullet.img:getHeight()) then
					table.remove(bullets, j)
					table.remove(enemies, i)
				end
			end
	end

end

function love.draw(dt)
	if debug then
		fps = tostring(love.timer.getFPS())
		love.graphics.print("Current FPS: "..fps, 9, 30)
	end

    love.graphics.print(initial_enemy_position.x, 400, 300)
	love.graphics.draw(player.img, player.x, player.y)
	--for i, enemy in ipairs(enemies) do
	for i, bullets in ipairs(bullets) do
		love.graphics.draw(bullets.img, bullets.x, bullets.y)
	end
	for i, enemies in ipairs(enemies) do
		love.graphics.draw(enemies.img, enemies.x, enemies.y)
	end
end
